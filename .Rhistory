up = c(1, s$upper[ ind[[i]] ]),
low = c(1, s$lower[ ind[[i]] ]),
cens = c(0, s$n.censor[ ind[[i]] ]),
group = rep(groups[i], n[i] + 1))
}
dat <- do.call(rbind, gr.df)
dat.cens <- subset(dat, cens != 0)
pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
xlab(xlab) + ylab(ylab) + ggtitle(main) +
geom_step(aes(col = group, lty = group))
col <- if(length(surv.col == 1)){
scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
} else{
scale_colour_manual(name = gr.name, values = surv.col)
}
pl <- if(surv.col[1] != 'gg.def'){
pl + col
} else {pl + scale_colour_discrete(name = gr.name)}
line <- if(length(lty.est) == 1){
scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
} else {scale_linetype_manual(name = gr.name, values = lty.est)}
pl <- pl + line
pl <- if(CI == T) {
if(length(surv.col) > 1 && length(lty.est) > 1){
stop('Either surv.col or lty.est should be of length 1 in order
to plot 95% CI with multiple strata')
}else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
geom_step(aes(y = low, color = group), lty = lty.ci)
} else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
geom_step(aes(y = low,lty = group), col = surv.col)}
} else {pl}
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
pl
}
pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
cens.col, lty.est, lty.ci,
cens.shape, back.white, xlab,
ylab, main)
} else {ggsurv.m(s, CI, plot.cens, surv.col ,
cens.col, lty.est, lty.ci,
cens.shape, back.white, xlab,
ylab, main)}
pl
}
mgus$new_time <- ifelse(is.na(mgus$pctime), mgus$futime, mgus$pctime)
# event := 1 if pctime == NA, else event := 1
mgus$event <- ifelse(is.na(mgus$pctime), 0, 1)
second_fit <- Surv(time = mgus$new_time, event = mgus$event)
pctime_KM <- survfit(second_fit ~ 1)
ggsurv(pctime_KM) +
ggtitle("KM Estimate of \n Worsening Diagnosis")
mspike_PH <- coxph(second_fit ~ mspike, data = mgus)
summary(mspike_PH)
mspike_PH2 <- coxph(second_fit ~ mspike + age + creat + alb + hgb, data = mgus)
summary(mspike_PH2)
sum(c(5,8,9,3,10,4,4,6,7,8,4))
sum(c(5,8,9,3,10,4,4,6,7,8,4))/11
x = c(5,8,9,3,10,4,4,6,7,8,4)
x^2
sum(x^2)
sum(x^2)/11
predict(mspike_PH2)
library(ggplot2)
library(survival)
library(ggkm)
library(survminer)
basefit <- Surv(time = mgus$futime, event = mgus$death)
sexPH <- coxph(Surv(time = futime, event = death) ~ sex, data= mgus)
sexPH <- coxph(basefit ~ sex, data = mgus)
sexPH
sexPH2 <- coxph(basefit ~ sex + age + alb + creat + hgb + mspike, data = mgus)
sexPH2
model_ach = coxph(basefit ~ age + hgb + creat, data = mgus)
model_ah = coxph(basefit ~ age + hgb, data = mgus)
model_ac = coxph(basefit ~ age + creat, data = mgus)
model_a = coxph(basefit ~ age, data = mgus)
a <- paste("age + hgb + creat =", round(BIC(model_ach), 2))
b <- paste("age + hgb =", round(BIC(model_ah), 2))
c <- paste("age + creat =", round(BIC(model_ac), 2))
d <- paste("age =", round(BIC(model_a), 2))
neatPrint(c(a,b,c,d))
library(ggplot2)
library(survival)
# Define the neatPrint function, makes for nicer output in Rmarkdown
neatPrint <- function(listOfStrings){
cat(listOfStrings, fill = 1)
}
# Define the ggsurv function, credit and link are below
ggsurv <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
cens.col = 'red', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = F, xlab = 'Time',
ylab = 'Survival', main = ''){
library(ggplot2)
strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
cens.col = 'red', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = F, xlab = 'Time',
ylab = 'Survival', main = ''){
dat <- data.frame(time = c(0, s$time),
surv = c(1, s$surv),
up = c(1, s$upper),
low = c(1, s$lower),
cens = c(0, s$n.censor))
dat.cens <- subset(dat, cens != 0)
col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
pl <- ggplot(dat, aes(x = time, y = surv)) +
xlab(xlab) + ylab(ylab) + ggtitle(main) +
geom_step(col = col, lty = lty.est)
pl <- if(CI == T | CI == 'def') {
pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
geom_step(aes(y = low), color = col, lty = lty.ci)
} else (pl)
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
pl
}
ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
cens.col = 'red', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = F, xlab = 'Time',
ylab = 'Survival', main = '') {
n <- s$strata
groups <- factor(unlist(strsplit(names
(s$strata), '='))[seq(2, 2*strata, by = 2)])
gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
gr.df <- vector('list', strata)
ind <- vector('list', strata)
n.ind <- c(0,n); n.ind <- cumsum(n.ind)
for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
for(i in 1:strata){
gr.df[[i]] <- data.frame(
time = c(0, s$time[ ind[[i]] ]),
surv = c(1, s$surv[ ind[[i]] ]),
up = c(1, s$upper[ ind[[i]] ]),
low = c(1, s$lower[ ind[[i]] ]),
cens = c(0, s$n.censor[ ind[[i]] ]),
group = rep(groups[i], n[i] + 1))
}
dat <- do.call(rbind, gr.df)
dat.cens <- subset(dat, cens != 0)
pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
xlab(xlab) + ylab(ylab) + ggtitle(main) +
geom_step(aes(col = group, lty = group))
col <- if(length(surv.col == 1)){
scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
} else{
scale_colour_manual(name = gr.name, values = surv.col)
}
pl <- if(surv.col[1] != 'gg.def'){
pl + col
} else {pl + scale_colour_discrete(name = gr.name)}
line <- if(length(lty.est) == 1){
scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
} else {scale_linetype_manual(name = gr.name, values = lty.est)}
pl <- pl + line
pl <- if(CI == T) {
if(length(surv.col) > 1 && length(lty.est) > 1){
stop('Either surv.col or lty.est should be of length 1 in order
to plot 95% CI with multiple strata')
}else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
geom_step(aes(y = low, color = group), lty = lty.ci)
} else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
geom_step(aes(y = low,lty = group), col = surv.col)}
} else {pl}
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
pl
}
pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
cens.col, lty.est, lty.ci,
cens.shape, back.white, xlab,
ylab, main)
} else {ggsurv.m(s, CI, plot.cens, surv.col ,
cens.col, lty.est, lty.ci,
cens.shape, back.white, xlab,
ylab, main)}
pl
}
model_ach = coxph(basefit ~ age + hgb + creat, data = mgus)
model_ah = coxph(basefit ~ age + hgb, data = mgus)
model_ac = coxph(basefit ~ age + creat, data = mgus)
model_a = coxph(basefit ~ age, data = mgus)
a <- paste("age + hgb + creat =", round(BIC(model_ach), 2))
b <- paste("age + hgb =", round(BIC(model_ah), 2))
c <- paste("age + creat =", round(BIC(model_ac), 2))
d <- paste("age =", round(BIC(model_a), 2))
neatPrint(c(a,b,c,d))
model_ach = coxph(basefit ~ age + hgb + creat, data = mgus)
model_ah = coxph(basefit ~ age + hgb, data = mgus)
model_ac = coxph(basefit ~ age + creat, data = mgus)
model_a = coxph(basefit ~ age, data = mgus)
a <- paste("age + hgb + creat =", round(BIC(model_ach), 2))
b <- paste("age + hgb =", round(BIC(model_ah), 2))
c <- paste("age + creat =", round(BIC(model_ac), 2))
d <- paste("age =", round(BIC(model_a), 2))
neatPrint(c(a,b,c,d))
mspike_PH <- coxph(second_fit ~ mspike, data = mgus)
summary(mspike_PH)
# newtime := futime if pctime == NA, else newtime := pctime
mgus$new_time <- ifelse(is.na(mgus$pctime), mgus$futime, mgus$pctime)
# event := 1 if pctime == NA, else event := 1
mgus$event <- ifelse(is.na(mgus$pctime), 0, 1)
second_fit <- Surv(time = mgus$new_time, event = mgus$event)
pctime_KM <- survfit(second_fit ~ 1)
ggsurv(pctime_KM) +
ggtitle("KM Estimate of \n Worsening Diagnosis")
mspike_PH <- coxph(second_fit ~ mspike, data = mgus)
summary(mspike_PH)
mspike_PH2 <- coxph(second_fit ~ mspike + age + creat + alb + hgb, data = mgus)
summary(mspike_PH2)
ggplot(mgus, mapping = aes(time = futime, status = death, color = factor(sex)))  +
geom_km(trans = "cloglog") +
ggtitle("Loglog plot of \n KM Estimate by sex") +
ylab("Y") +
theme(legend.title = element_blank())
predict(mspike_PH2)
heda(mgus)
head(mgus)
only_women <- mgus[mgus$sex == "female", ]
women_fit <- Surv(time=futime, event=death, data = only_women)
women_fit <- Surv(time=only_women$futime, event=only_women$death)
women_cox <- coxph(women_fit~1)
plot(women_fit)
women_fit <- survfit(women_surv ~ 1)
women_surv <- Surv(time=only_women$futime, event=only_women$death)
women_fit <- survfit(women_surv ~ 1)
plot(women_fit)
women_cox <- coxph(women_fit ~ 1)
women_cox <- coxph(women_surv ~ 1)
plot(predict(women_cox))
predict(women_cox)
plot(sexPH)
plot(basefit)
plot(basefit)
survfit(sexPH)
plot(survfit(sexPH))
plot(survfit(sexPH))
basefit <- Surv(time = mgus$futime, event = mgus$death)
sexPH <- coxph(basefit ~ sex, data = mgus)
sexPH
plot(survfit(sexPH ~ mgus$sex))
plot(survfit(sexPH))
ggsurv(survfit(sexPH))
class(sexPH)
sexPH
str(sexPH)
predict(sexPH)
means <- predict(sexPH)
str(means)
coef(sexPH)
coef(sexPH)^-1
female_coef <- coef(sexPH)^-1
str(sexPH)
sexPH$coefficients
plot(survfit(basefit) ~ mgus$sex)
plot(survfit(basefit ~ mgus$sex))
ggsurv(survfit(basefit ~ mgus$sex))
1/coef(sexPH)
coef(sexPH)^-1
sex_KM <- survfit(basefit ~ mgus$sex)
sex_KM$surv
sex_KM$surv[[1]]
sex_KM$surv[[[1]]]
sex_KM <- survfit(basefit ~ mgus$sex)
plot(sex_KM)
coef(sexPH)
predict(sexPH, type = "risk")
plot(sexPH)
means? <- predict(sexPH, type = "risk")
means <- predict(sexPH, type = "risk")
means
survfit(sexPH)
sexKM <- survfit(basefit ~ mgus$sex)
survfit(sexPH)
fitPH <- survfit(sexPH)
plot(fitPH)
ggsurv(survfit)
ggsurv(fitPH)
a <- ggsurv(fitPH)
Q
a <- ggsurv(fitPH)
class(a)
a + ggsurv(sexKM)
ggkm(sexKM)
ggplot() +
ggkm(sexKM)
ggplot() +
geom_km(sexKM)
plot(sexKM)
plot(fitPH)
plot(fitPH)
plot(fitPH)
plot(sexKM)
only_women <- mgus[mgus$sex == "female", ]
women_surv <- Surv(time=only_women$futime, event=only_women$death)
women_fit <- survfit(women_surv)
women_fit <- survfit(women_surv ~ 1)
only_women <- mgus[mgus$sex == "female", ]
women_surv <- Surv(time=only_women$futime, event=only_women$death)
women_KM <- survfit(women_surv ~ 1)
#sexKM <- survfit(basefit ~ mgus$sex)
fitPH <- survfit(sexPH)
#plot(sexKM)
plot(women_KM)
plot(fitPH)
K
plot(women_KM)
plot(fitPH)
class(women_KM)
fitPH
ggsurv(fitPH)
ggsurv(fitPH)
ggsurv(women_KM)
ggsurv(women_KM)
ggsurv(fitPH)
ggsurv(women_KM) + layer(ggsurv(fitPH))
ggsurv(women_KM) + layer(ggsurv(fitPH), stat = "identity")
lines(fitPH)
plot(women_KM)
lines(fitPH)
lines(fitPH, col = "red")
plot(women_KM)
lines(fitPH, col = "red")
plot(women_KM, conf.int = F)
lines(fitPH, col = "red", conf.int = F)
plot(women_KM, conf.int = F)
lines(fitPH, col = "red", conf.int = F)
title("Comparison of KM and Cox Model")
plot(women_KM, conf.int = F)
lines(fitPH, col = "red", conf.int = F)
title("Comparison of KM and Cox Model")
cox.zph(women_KM, fitPH)
cox.zph(sexPH)
cox.zph(sexPH)
summary(cox.zph(sexPH))
cox.zph(sexPH)
plot(cox.zph(sexPH))
plot(cox.zph(sexPH))
plot(cox.zph(sexPH))
hline()
plot(cox.zph(sexPH))
abline(a = 0.5, b = 0)
plot(cox.zph(sexPH))
abline(a = 0.35, b = 0, col = "red")
ggplot(mgus, mapping = aes(time = futime, status = death, color = factor(sex)))  +
geom_km(trans = "cloglog") +
ggtitle("Loglog plot of \n KM Estimate by sex") +
ylab("Y") +
theme(legend.title = element_blank())
library(arules)
install.packages("arules")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
a_priori <- apriori(trans, parameter = list(support=0.01, confidence=0.5))
rules <- as.data.frame(inspect(a_priori))
ordering <- order(rules[,"support"], decreasing = T)
rules
names(rules)
inspect(a_priori)
class(inspect(a_priori))
class(inspect(a_priori))
rules <- inspect(a_priori)
ordering <- order(rules$support, decreasing = T)
rules$support
sort(rules$support)
sort(rules$support, decreasing = T)
rules <- sort(rules$support, decreasing=T)
rules[1:5, ]
rules[1:5]
rules <- rules[with(rules, order(-support))]
a_priori <- apriori(trans, parameter = list(support=0.01, confidence=0.5))
rules <- inspect(a_priori)
rules <- rules[with(rules, order(-support))]
rules <- rules[with(rules, order(-support)), ]
rules[1:5, ]
source('~/.active-rstudio-document', echo=TRUE)
?order
rules <- rules[with(rules, order(support, decreasing = T)), ]
rules[1:5, ]
library(plyr)
library(dplyr)
source('~/.active-rstudio-document', echo=TRUE)
with(rules, order(support, decreasing = T))
with(rules, order("support", decreasing = T))
with(rules, order(rules$support, decreasing = T))
class(rules)
rules
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
rules
source('~/.active-rstudio-document', echo=TRUE)
View(goods)
source('~/.active-rstudio-document', echo=TRUE)
head(inspect(rules), 5)
inspect(head(rules, 5))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
rules
a_priori
inspect(a_priori)
rules <- data.frame(inspect(rules))
a_priori <- apriori(trans, parameter = list(support=0.01, confidence=0.5))
a_priori
as.data.frame(a_priori)
as.data.frame(inspect(a_priori, head))
as.data.frame(inspect(a_priori, 5))
as.data.frame(inspect(a_priori))
as.data.frame(labels(lhs(a_priori)))
a_priori@quality
ggplot(a_priori@quality) +
geom_point(aes(x=support, y=confidence, color=lift)) +
ggtitle("Support and Confidence of Rules")
names_of_items
a <- paste("Names of items in first five transactions:", paste(names_of_items, collapse = ", "))
a
paste("Names of items in first five transactions:", paste(names_of_items, collapse = ", "))
paste("Names of items in first five transactions... \n", paste(names_of_items, collapse = ", "))
paste("Names of items in first five transactions...", paste(names_of_items, collapse = ", "), sep = "\n")
strsplit(paste("Names of items in first five transactions...", paste(names_of_items, collapse = ", "), sep = "\n"), split = "/n")
```
strsplit(paste("Names of items in first five transactions...", paste(names_of_items, collapse = ", "), sep = "\n"), split = "/n")
strsplit(paste("Names of items in first five transactions...", paste(names_of_items, collapse = ", "), sep = "\n"), split = "/n")
msg <- "==================================================\n"
msg2 <- paste(msg, "Var:")
strsplit(msg2, "\n")[[1]]
msg2
strsplit(paste("Names of items in first five transactions...", paste(names_of_items, collapse = ", "), sep = "\n"), split = "/n")
strsplit(paste("Names of items in first five transactions...", paste(names_of_items, collapse = ", "), sep = "\n "), split = "/n")
a <- paste("Names of items in first five transactions... ")
b <- paste(names_of_items, collapse = ", ")
neatPrint(c(a,b))
neatPrint <- function(listOfStrings){
cat(listOfStrings, fill = 1)
}
a <- paste("Names of items in first five transactions... ")
b <- paste(names_of_items, collapse = ", ")
neatPrint(c(a,b))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Documents/Fall/PSTAT175/SurvivalAnalysis")
source('~/.active-rstudio-document', echo=TRUE)
edu_coxph <- coxph(Surv(years, div) ~ edu, data = divorce)
edu_coxph
edu_strata_zph
edu_strata_coxph
edu_strata_coxph
edu_split_df <- survSplit(Surv(years, div) ~ edu + couple, data = divorce, cut = 47, episode = "Ep")
edu_surv_split <- coxph(Surv(years, div) ~ edu:Ep, data = edu_split_df)
edu_couple_surv_split <- coxph(Surv(years, div) ~ edu + couple, data = edu_split_df)
edu_surv_split
head(edu_split_df)
edu_split_df <- survSplit(Surv(years, div) ~ edu, data = divorce, cut = 47, episode = "Ep")
edu_surv_split <- coxph(Surv(years, div) ~ edu:Ep, data = edu_split_df)
edu_couple_surv_split <- coxph(Surv(years, div) ~ edu + couple, data = edu_split_df)
edu_split_df <- survSplit(Surv(years, div) ~ edu, data = divorce, cut = 47, episode = "Ep")
edu_surv_split <- coxph(Surv(years, div) ~ edu:Ep, data = edu_split_df)
edu_couple_surv_split <- coxph(Surv(years, div) ~ edu, data = edu_split_df)
edu_surv_split
edu_surv_split <- coxph(Surv(years, div) ~ edu + Ep, data = edu_split_df)
edu_surv_split
plot_grid(a,b)
# Smooth histograms of censored variables
a <- ggplot(divorce) +
geom_density(mapping = (aes(x=years, fill = as.factor(div), group = div)), alpha = .5)+
ggtitle("Distribution of Censored and\n Non-Censored Observations")+
theme(legend.title = element_blank())
# Get proportions of mixed couples in each education bracket
edu_counts <- as.data.frame.matrix(table(divorce$edu, divorce$mixed))
names(edu_counts) = c("no_mix", "mixed")
row.names(edu_counts) = c("HS", "BA", "MA")
mixed_HS = paste(round( (edu_counts$mixed[1] / sum(edu_counts[1,])), 2) * 100, "%", sep = "")
mixed_BA = paste(round( (edu_counts$mixed[2] / sum(edu_counts[2,])), 2) * 100, "%", sep = "")
mixed_MA = paste(round( (edu_counts$mixed[3] / sum(edu_counts[3,])), 2) * 100, "%", sep = "")
appending_text = "\n mixed"
HS_text = paste(mixed_HS, appending_text)
BA_text = paste(mixed_BA, appending_text)
MA_text = paste(mixed_MA, appending_text)
proportions = c(HS_text, BA_text, MA_text)
# Bar plot of education levels, colored by race
b <- ggplot(divorce)+
geom_bar(mapping = aes(x=edu, fill = as.factor(hblack))) +
geom_text(mapping = aes(x=edu), label = proportions, stat="count") +
ggtitle("Frequency of Education Levels \n Colored by Male's Race") +
xlab("Education Level") +
theme(legend.title = element_blank())
plot_grid(a,b)
